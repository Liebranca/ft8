#!/usr/bin/perl

# deps
  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/';

  use cash;
  use avt;
  use jojft;

# ---   *   ---   *   ---
# info

  use constant {
    VERSION   =>  "0.1b",

  };

# ---   *   ---   *   ---
# global storage

  my %CACHE=(
    -OPTS   => 0,

  );

# print helpme
sub help {

  my @header=(
    "ft8 <action> <fontname> <out>",

    "ft8 handles 8x8 bitmap fonts in joj format; it can pack an existing".
    " bmp into this one-bit per pixel encoding as well as generate".
    " multiple resized versions of the original font".

    '$:parg;>'.

    "Note that ft8 can only use 128x128 images as *source*, meaning only those".
    " can be used to generate larger fonts. These sources must respect the".
    " standard 16 glyphs per row, for a total of 256 glyphs"

  );my @OPTS=@{ $CACHE{-OPTS} };

  print avt::ex 'help',[@header,@OPTS],' ';
  exit;

# print version info
};sub version {
  print avt::version(
    'ft8',VERSION,
    'IBN-3DILA'

  );exit;
};

# ---   *   ---   *   ---

# args=sizes,path to joj font (no ext), outdir
# build fonts from joj
sub generate {

  my @res=split ',',shift @ARGV;

  my $src=shift @ARGV;
  my $odir=shift @ARGV;

  # get basename from path
  my $name=avt::basename($src);

  my $src_table="$odir/$name".'_table';
  if(!(-e $odir)) {`mkdir -p $odir`;};

# ---   *   ---   *   ---

  # generate base bmp from joj
  my $src_bmp=$src.'_src.bmp';
  jojft::jtob($src,$src_bmp);

  # extract basis unicode table
  jojft::stunift(
    '/usr/share/kbd/consolefonts/cp865-8x8.psfu.gz',
    $src_table

  );

# ---   *   ---   *   ---
# iterate resolutions

  while(@res) {

    my $pxsz=shift @res;

    # more string paste
    my $dst_bmp="$odir/$name$pxsz.bmp";
    my $dst_psf="$odir/$name$pxsz.psf";
    my $dst_psfu="$odir/$name$pxsz.psfu";

    # calculate output size
    my $pxpc=$pxsz*16;
    $pxpc="$pxpc".'x'."$pxpc";

# ---   *   ---   *   ---

    # resize and write font
    system 'magick',('convert','-interpolate','Integer',
      '-filter','point','-compress','None','-depth','24',
      '-resize', $pxpc,'BMP3:'.$src_bmp,'BMP3:'.$dst_bmp

    );avt::ex 'writepsf',["-bw$pxsz","-bh$pxsz",$dst_bmp,$dst_psf],'';

    # add unicode table
    system 'psfaddtable',($dst_psf,$src_table,$dst_psfu);

    # cleanup
    `rm $dst_bmp`;
  };`rm $src_bmp`;

};

# ---   *   ---   *   ---

sub masspcf {

  my @res=split ',',shift @ARGV;

  my $name=shift @ARGV;
  my $idir=shift @ARGV;
  my $odir=shift @ARGV;

  if(!(-e $odir)) {`mkdir -p $odir`;};

# ---   *   ---   *   ---

  while(@res) {
    my $sz=shift @res;
    my $call="psf2bdf --256 --fontname=$name$sz ".
      "$idir/$name$sz.psfu $odir/$name$sz.bdf";

    `$call`;

    $call="bdftopcf -o $odir/$name$sz.pcf ".
      "$odir/$name$sz.bdf";

    `$call`;`rm $odir/$name$sz.bdf`;

  };chdir $odir;
  `mkfontscale`;
  `mkfontdir`;

  `xset +fp $odir`;
  `xset fp rehash`;

};

sub upk_b {

  my $src=shift @ARGV;

  # get bmp from joj
  my $bmp=$src.'.bmp';

  jojft::jtob($src,$bmp);

};

sub upk_gl {

  my $src=shift @ARGV;
  my $outdir=shift @ARGV;

  # get bmp from joj
  my $gl=$src.'.glsl';

  jojft::jtogl($src,$gl);
  if($outdir) {`mv $gl $outdir/`;};

};

# ---   *   ---   *   ---

# options
my @OPTS=@{

  cash::moptab(

    '-h,--help',
    'Display this message',
    \&help,


    '-v,--version',
    'Print version info and exit',
    \&version,


    '-g,--generate <size0,sizeN>',
    'Creates font and resized versions',
    \&generate,

    '-x,--xformat',
    'Makes pcf versions of existing font',
    \&masspcf,

    '-ub,--unpack-bmp',
    'Unpacks provided joj font into a bmp image',
    \&upk_b,

    '-ugl,--unpack-gl',
    'Unpacks provided joj font into a glsl file',
    \&upk_gl

  )

};$CACHE{-OPTS}=\@OPTS;
cash::runtab(\@ARGV);

# ---   *   ---   *   ---
1; # ret;
