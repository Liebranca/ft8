#!/usr/bin/perl

# deps
  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/';

  use cash;
  use avt;
  use jojft;

# ---   *   ---   *   ---
# info

  use constant {
    VERSION   =>  "0.1b",

  };

# ---   *   ---   *   ---
# global storage

  my %CACHE=(
    -OPTS   => 0,

  );

# print helpme
sub help {

  my @header=(
    "ft8 <action> <fontname>",
    
    "ft8 handles 8x8 bitmap fonts in joj format; it can pack an existing".
    " bmp into this one-bit per pixel encoding as well as generate".
    " multiple resized versions of the original font".

    '$:parg;>'.

    "Note that ft8 can only use 128x128 images as *source*, meaning only those".
    " can be used to generate larger fonts. These sources must respect the".
    " standard 16 glyphs per row, for a total of 256 glyphs"

  );my @OPTS=(@header,@{ $CACHE{-OPTS} });  
  print avt::ex 'help',\@OPTS,' ';exit;

# print version info
};sub version {
  print avt::version(
    'ft8',VERSION,
    'IBN-3DILA'
    
  );exit;
};

# ---   *   ---   *   ---

# args=sizes,path to joj font (no ext), outdir
# build fonts from joj
sub generate {

  my @res=split ',',shift @ARGV;

  my $src=shift @ARGV;
  my $odir=shift @ARGV;

  # get basename from path
  my $name;{
    my @tmp=split '/',$src;
    $name=$tmp[$#tmp];

  };

  my $src_table="$odir/$name".'_table';
  if(!(-e $odir)) {`mkdir -p $odir`;};

# ---   *   ---   *   ---

  # generate base bmp from joj
  my $src_bmp=$src.'_src.bmp';
  jojft::jtob($src,$src_bmp);

  # extract basis unicode table
  jojft::stunift(
    '/usr/share/kbd/consolefonts/cp865-8x8.psfu.gz',
    $src_table

  );

# ---   *   ---   *   ---
# iterate resolutions

  while(@res) {

    my $pxsz=shift @res;

    # more string paste
    my $dst_bmp="$odir/$name$pxsz.bmp";
    my $dst_psf="$odir/$name$pxsz.psf";
    my $dst_psfu="$odir/$name$pxsz.psfu";

    # calculate output size
    my $pxpc=$pxsz*16;
    $pxpc="$pxpc".'x'."$pxpc";

# ---   *   ---   *   ---

    # resize and write font
    system 'magick',('convert','-interpolate','Integer',
      '-filter','point','-compress','None','-depth','24',
      '-resize', $pxpc,'BMP3:'.$src_bmp,'BMP3:'.$dst_bmp

    );avt::ex 'writepsf',["-bw$pxsz","-bh$pxsz",$dst_bmp,$dst_psf],'';

    # add unicode table
    system 'psfaddtable',($dst_psf,$src_table,$dst_psfu);

    # cleanup
    `rm $dst_bmp`;
  };`rm $src_bmp`;
  
};

# ---   *   ---   *   ---

# options
my @OPTS=(
  '-h,--help'         ,'Display this message',
  '-v,--version'      ,'Print version info and exit',
  '-g,--generate'     ,'Creates font and resized versions',
  '-up,--unpack'      ,'Unpacks provided joj font into a bmp image',

);my %OPTS;{
  my @op_calls=(\&help,\&version,\&generate,undef);
  %OPTS=%{ cash::mcalltab(\@OPTS,\@op_calls) };

  $CACHE{-OPTS}=\@OPTS;

};if(!@ARGV) {help;};

# iter passed args
while(@ARGV && grep m/${ ARGV[0] }/,keys %OPTS) {
  my $opt=shift;
  $OPTS{$opt}->();

};exit;

# ---   *   ---   *   ---
1; # ret;
